rm(list=ls()) 
library(keras)
library(abind)
library(mvtnorm)

#==============================================#
#               SHAP function                  #
#==============================================#

# new_model: forecast model
# X_Data0: explanatory variables including Y lags and X lags 
# Y_Data: dependent variable
# lag0: lags

shap_val_ftn = function(new_model, X_Data0, Y_Data, lag0){
  p0 = ncol(X_Data0)/lag0
  l0 = rep(list(0:1), ncol(X_Data0))
  Z0 = as.matrix(expand.grid(l0))
  Phi0 = matrix(NA, ncol = ncol(X_Data0), nrow = nrow(X_Data0))
  X_mean = apply(X_Data0, 2, mean)
  z_bar = Z0%*%matrix(1, nrow = ncol(Z0), ncol = 1)
  w0 = (ncol(X_Data0)-1)/(factorial(ncol(X_Data0))/(factorial(z_bar)*factorial(ncol(X_Data0)-z_bar))*z_bar*(ncol(X_Data0)-z_bar))
  
  for(t in 1:nrow(X_Data0)){
    X_Data_t = X_Data0[t,]
    F_Data = matrix(NA, nrow = nrow(Z0), ncol = ncol(Z0))
    
    for(i in 1:nrow(Z0)){
      Z0_seq = Z0[i,]
      index_col = which(Z0_seq==1)
      F_Data[i,] = X_mean
      F_Data[i,index_col] = X_Data_t[index_col]
    }
    
    F_Data0 = array(NA, c(nrow(F_Data), lag0, p0))
    for(kk in 1:p0){
      F_Data0[,,kk] = F_Data[,(lag0*(kk-1)+1):(lag0*kk)]
    }
    F0 = as.numeric(predict_on_batch(new_model, F_Data0))
    
    w = c(10^(10), w0[-c(1, nrow(Z0)),1], 10^(10))
    lm_Z = lm((F0-F0[1]) ~ as.matrix(Z0)-1, weights = w)
    Phi0[t,] = lm_Z$coef
  }
  
  F_Data = c(); F_Data0 = c(); F0 = c(); Z0 = c()
  
  return(list(Phi0 = Phi0))  
}

#==============================================#
#           vector SHAP function               #
#==============================================#

Vec_shap_val_ftn = function(new_model, X_Data0, Y_Data, lag0){
  p0 = ncol(X_Data0)/lag0
  l0 = rep(list(0:1), p0)
  Z0 = as.matrix(expand.grid(l0))
  Phi0 = matrix(NA, ncol = p0, nrow = nrow(X_Data0))
  X_mean = apply(X_Data0, 2, mean)
  z_bar = Z0%*%matrix(1, nrow = ncol(Z0), ncol = 1)
  w0 = (p0-1)/(factorial(p0)/(factorial(z_bar)*factorial(p0-z_bar))*z_bar*(p0-z_bar))
  
  f00 = c(); f10 = c(); f01 = c(); f11 = c()
  for(t in 1:nrow(X_Data0)){
    X_Data_t = X_Data0[t,]
    F_Data = matrix(NA, nrow = nrow(Z0), ncol = ncol(X_Data0))
    
    for(i in 1:nrow(Z0)){
      Z0_seq = rep(Z0[i,], each = lag0)
      index_col = which(Z0_seq==1)
      F_Data[i,] = X_mean
      F_Data[i,index_col] = X_Data_t[index_col]
    }
    
    F_Data0 = array(NA, c(nrow(F_Data), lag0, p0))
    for(kk in 1:p0){
      F_Data0[,,kk] = F_Data[,(lag0*(kk-1)+1):(lag0*kk)]
    }
    
    F0 = as.numeric(predict_on_batch(new_model, F_Data0))
    w = c(10^(10), w0[-c(1, nrow(Z0)),1], 10^(10))
    lm_Z = lm((F0-F0[1]) ~ as.matrix(Z0)-1, weights = w)
    Phi0[t,] = lm_Z$coef
  }
  
  return(list(Phi0 = Phi0))  
}


#==============================================#
#            sampling SHAP function            #
#==============================================#

Sample_shap_val_ftn = function(s_prop, new_model, X_Data0, Y_Data, lag0){
  #s_prop = (nrow(X_Data0)-2)/nrow(X_Data0)
  p0 = ncol(X_Data0)/lag0
  l0 = rep(list(0:1), ncol(X_Data0))
  Z0 = as.matrix(expand.grid(l0))
  Phi0 = matrix(NA, ncol = ncol(X_Data0), nrow = nrow(X_Data0))
  X_mean = apply(X_Data0, 2, mean)
  z_bar = Z0%*%matrix(1, nrow = ncol(Z0), ncol = 1)
  w0 = (ncol(X_Data0)-1)/(factorial(ncol(X_Data0))/(factorial(z_bar)*factorial(ncol(X_Data0)-z_bar))*z_bar*(ncol(X_Data0)-z_bar))
  Z0_int = sample(2:(nrow(Z0)-1), round(s_prop*nrow(Z0)), prob = (w0[-c(1, nrow(Z0)),1]/sum(w0[-c(1, nrow(Z0)),1])))
  Z0_int = sort(Z0_int)
  
  for(t in 1:nrow(X_Data0)){
    X_Data_t = X_Data0[t,]
    F_Data = matrix(NA, nrow = nrow(Z0), ncol = ncol(Z0))
    
    for(i in 1:nrow(Z0)){
      Z0_seq = Z0[i,]
      index_col = which(Z0_seq==1)
      F_Data[i,] = X_mean
      F_Data[i,index_col] = X_Data_t[index_col]
    }
    
    F_Data_s = F_Data[c(1, Z0_int, nrow(Z0)),]
    F_Data0 = array(NA, c(nrow(F_Data_s), lag0, p0))
    for(kk in 1:p0){
      F_Data0[,,kk] = F_Data_s[,(lag0*(kk-1)+1):(lag0*kk)]
    }
    
    F0 = as.numeric(predict_on_batch(new_model, F_Data0))
    Z = Z0[Z0_int,]
    A = 0; b_n = 0
    for(ss in 1:nrow(Z)){
      Zi = matrix(Z[ss,], ncol = 1)
      A = A + Zi%*%t(Zi)
      b_n = b_n + Zi*(F0[ss+1]-F0[1])
    }
    b_n = 1/nrow(Z)*b_n
    A = 1/nrow(Z)*A
    one_mat = matrix(1, ncol = 1, nrow = nrow(A))
    inv_A = solve(A)
    Phi0[t,] = inv_A%*%(b_n - one_mat%*%((t(one_mat)%*%inv_A%*%b_n - F0[length(F0)]+F0[1])/(t(one_mat)%*%inv_A%*%one_mat)))
  }
  
  F_Data = c(); F_Data0 = c(); F0 = c(); Z0 = c()
  
  return(list(Phi0 = Phi0))  
}
